fun q -> (?~) ((===) q !1), all answers {
q=_.10 [=/= 1];
}
fun q -> (?~) ((=/=) q !1), all answers {
q=1;
}
fun q -> (&&&) ((===) q !1) ((?~) ((===) q !2)), all answers {
q=1;
}
fun q -> (&&&) ((=/=) q !1) ((?~) ((=/=) q !2)), all answers {
q=2;
}
fun q -> (?~) ((|||) ((===) q !1) ((=/=) q !1)), all answers {
}
fun q ->
  Fresh.two
    (fun x y ->
       (&&&) ((|||) ((=/=) x !1) ((=/=) y !2)) ((===) q ((!!) [x; y]))), all answers {
q=[_.11 [=/= 1]; _.12];
q=[_.11; _.12 [=/= 2]];
}
fun q ->
  Fresh.two
    (fun x y ->
       (&&&) ((?~) ((&&&) ((===) x !1) ((===) y !2))) ((===) q ((!!) [x; y]))), all answers {
q=[_.11; _.12 [=/= 2]];
q=[_.11 [=/= 1]; _.12];
}
fun q ->
  Fresh.two
    (fun x y ->
       (&&&) ((&&&) ((=/=) x !1) ((=/=) y !2)) ((===) q ((!!) [x; y]))), all answers {
q=[_.11 [=/= 1]; _.12 [=/= 2]];
}
fun q ->
  Fresh.two
    (fun x y ->
       (&&&) ((?~) ((|||) ((===) x !1) ((===) y !2))) ((===) q ((!!) [x; y]))), all answers {
q=[_.11 [=/= 1]; _.12 [=/= 2]];
}
fun q ->
  Fresh.two
    (fun x y ->
       (&&&) ((===) q ((!!) [x; y]))
         ((?~) ((===) ((!!) [x; y]) ((!!) [!1; !2])))), all answers {
q=[_.11; _.12 [=/= 2]];
q=[_.11 [=/= 1]; _.12];
}
fun q ->
  Fresh.two
    (fun x y ->
       (&&&) ((===) q ((!!) [x; y]))
         ((?~) ((=/=) ((!!) [x; y]) ((!!) [!1; !2])))), all answers {
q=[1; 2];
}
fun q -> Fresh.one (fun x -> (=/=) q ((!!) [!1; x; !2])), all answers {
q=_.10 [=/= [1; _.11; 2]];
}
fun q -> Fresh.one (fun x -> (?~) ((===) q ((!!) [!1; x; !2]))), all answers {
q=_.10 [=/= [1; _.11; 2]];
}
fun q -> (?~) (Fresh.one (fun x -> (===) q ((!!) [x]))), all answers {
q=_.10 [=/= [_.11]];
}
fun q ->
  (&&&) ((?~) (Fresh.one (fun x -> (===) q ((!!) [x]))))
    (Fresh.one (fun y -> (===) q ((!!) [y]))), all answers {
}
fun q ->
  (&&&) (Fresh.one (fun y -> (===) q ((!!) [y])))
    ((?~) (Fresh.one (fun x -> (===) q ((!!) [x])))), all answers {
}
fun q -> (?~) (Fresh.one (fun x -> (===) x !1)), all answers {
}
fun q -> (&&&) ((===) q !1) ((?~) (Fresh.one (fun x -> (===) x q))), all answers {
}
fun q -> (?~) (Fresh.one (fun x -> (===) x q)), all answers {
}
fun q -> (?~) (Fresh.one (fun x -> (|||) ((===) x !1) ((===) x !2))), all answers {
}
fun q r ->
  (&&&) ((&&&) ((===) q !1) ((===) r !2))
    ((?~) (Fresh.one (fun x -> (|||) ((===) x q) ((===) x r)))), all answers {
}
fun q r -> (?~) (Fresh.one (fun x -> (|||) ((===) x q) ((===) x r))), all answers {
}
fun q -> (?~) (Fresh.one (fun x -> (=/=) x q)), all answers {
}
fun q r -> (?~) (Fresh.one (fun x -> (|||) ((=/=) x q) ((=/=) x r))), all answers {
}
fun q -> (?~) (Fresh.one (fun x -> (=/=) q ((!!) [x]))), all answers {
}
fun q r -> (?~) (Fresh.one (fun x -> (&&&) ((===) x q) ((===) x r))), all answers {
q=_.10 [=/= _.11]; r=_.11;
}
fun q r -> (?~) (Fresh.one (fun x -> (&&&) ((=/=) x q) ((=/=) x r))), all answers {
}
fun q -> (?~) (Fresh.one (fun x -> (?~) (Fresh.one (fun y -> (===) x y)))), all answers {
q=_.10;
}
fun q -> (?~) (Fresh.one (fun x -> (?~) (Fresh.one (fun y -> (=/=) x y)))), all answers {
q=_.10;
}
fun q -> (?~) (Fresh.one (fun x -> (?~) (Fresh.one (fun y -> (===) q y)))), all answers {
q=_.10;
}
fun q -> (?~) (Fresh.one (fun x -> (?~) (Fresh.one (fun y -> (=/=) q y)))), all answers {
q=_.10;
}
fun q -> Fresh.one (fun n -> (&&&) ((===) n (nat 3)) ((?~) (peano n))), all answers {
}
