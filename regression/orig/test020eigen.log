fun q -> Eigen.one (fun x -> (===) q x), all answers {
}
fun q -> Eigen.one (fun x -> (===) x q), all answers {
}
fun q -> Eigen.one (fun x -> Fresh.one (fun y -> (===) x y)), all answers {
q=_.10;
}
fun q ->
  Eigen.one (fun x -> Fresh.one (fun y -> (&&&) ((===) x y) ((===) q y))), all answers {
}
fun q ->
  Eigen.one (fun x -> Fresh.one (fun y -> (&&&) ((===) x y) ((===) y q))), all answers {
}
fun q ->
  Eigen.one (fun x -> Fresh.one (fun y -> (&&&) ((===) y x) ((===) q y))), all answers {
}
fun q ->
  Eigen.one (fun x -> Fresh.one (fun y -> (&&&) ((===) y x) ((===) y q))), all answers {
}
fun q ->
  Eigen.one
    (fun x -> Fresh.one (fun y -> (&&&) ((===) y (pair x x)) ((===) y q))), all answers {
}
fun q ->
  Eigen.one
    (fun x -> Fresh.one (fun y -> (&&&) ((===) q ((!<) y)) ((===) y x))), all answers {
}
fun q ->
  Eigen.one
    (fun x ->
       Fresh.one
         (fun y -> (===) y (list [(!!) 1; (!!) 2; (!!) 3; x; (!!) 4]))), all answers {
q=_.10;
}
fun q ->
  Eigen.one
    (fun x ->
       Fresh.one
         (fun y -> (===) x (list [(!!) 1; (!!) 2; (!!) 3; y; (!!) 4]))), all answers {
}
fun q ->
  Fresh.one
    (fun x ->
       Eigen.one
         (fun y -> (===) x (list [(!!) 1; (!!) 2; (!!) 3; y; (!!) 4]))), all answers {
}
fun q ->
  Fresh.one
    (fun x ->
       Eigen.one
         (fun y -> (===) y (list [(!!) 1; (!!) 2; (!!) 3; x; (!!) 4]))), all answers {
}
fun q ->
  Eigen.two
    (fun hd tl ->
       Fresh.three (fun x y z -> (===) ((%) hd tl) (list [x; y; z]))), all answers {
}
fun q -> Eigen.one (fun x -> Fresh.one (fun y -> (===) (pair q x) (pair y y))), all answers {
}
fun q ->
  Eigen.two (fun x y -> Fresh.one (fun z -> (===) (pair x y) (pair z z))), all answers {
}
fun q -> Eigen.one (fun x -> (=/=) x q), all answers {
}
fun q -> Eigen.one (fun x -> (=/=) q x), all answers {
}
fun q -> Eigen.one (fun x -> (=/=) x ((!!) 5)), all answers {
}
fun q -> Eigen.two (fun x y -> (=/=) x y), all answers {
}
fun q -> Eigen.one (fun x -> Fresh.one (fun y -> (=/=) x y)), all answers {
q=_.10;
}
fun q -> Eigen.one (fun x -> (=/=) x x), all answers {
}
fun q -> Eigen.one (fun x -> (=/=) x ((%) ((!!) 1) x)), all answers {
q=_.10;
}
fun q ->
  Eigen.two (fun x y -> Fresh.two (fun a b -> (=/=) (pair x a) (pair y b))), all answers {
q=_.10;
}
fun q -> Eigen.two (fun x y -> (=/=) q (list [x; y])), all answers {
q=_.10 [=/= [_.11; _.12]];
}
fun q -> Eigen.one (fun x -> (=/=) x (pair ((!!) 1) q)), all answers {
}
fun q ->
  Eigen.one
    (fun x -> Fresh.one (fun y -> (=/=) (pair ((!!) 5) x) (pair ((!!) 6) y))), all answers {
q=_.10;
}
fun q ->
  Fresh.one
    (fun x -> Eigen.one (fun y -> (=/=) (pair ((!!) 5) x) (pair ((!!) 6) y))), all answers {
q=_.10;
}
fun q -> Eigen.one (fun x -> Fresh.one (fun y -> (=/=) (pair q x) (pair y y))), all answers {
q=_.10;
}
fun q ->
  Eigen.one (fun x -> (=/=) x (list [(!!) 1; (!!) 2; (!!) 3; q; (!!) 4])), all answers {
}
fun q ->
  Eigen.one
    (fun x ->
       Fresh.one
         (fun y -> (=/=) y (list [(!!) 1; (!!) 2; (!!) 3; x; (!!) 4]))), all answers {
q=_.10;
}
fun q ->
  Fresh.one
    (fun x ->
       Eigen.one
         (fun y -> (=/=) x (list [(!!) 1; (!!) 2; (!!) 3; y; (!!) 4]))), all answers {
q=_.10;
}
fun q -> Eigen.one (fun x -> (=/=) x (list [q])), all answers {
}
fun q -> Eigen.one (fun x -> Fresh.one (fun y -> (=/=) y (list [x]))), all answers {
q=_.10;
}
fun q -> Eigen.two (fun x y -> Fresh.one (fun z -> (=/=) z (list [x; y]))), all answers {
q=_.10;
}
fun q -> Fresh.one (fun x -> Eigen.two (fun y z -> (=/=) x (list [y; z]))), all answers {
q=_.10;
}
fun q ->
  Fresh.one
    (fun x ->
       (&&&) ((===) x (list [(!!) 1]))
         (Eigen.two (fun y z -> (=/=) x (list [y; z])))), all answers {
q=_.10;
}
fun q ->
  Fresh.one
    (fun x ->
       Eigen.two
         (fun y z -> (&&&) ((===) x (list [(!!) 1])) ((=/=) x (list [y; z])))), all answers {
q=_.10;
}
fun q ->
  Eigen.two
    (fun x y ->
       Fresh.one
         (fun z -> (&&&) ((=/=) z (list [x; y])) ((===) z (list [(!!) 1])))), all answers {
q=_.10;
}
fun q ->
  Eigen.two
    (fun x y ->
       Fresh.one
         (fun z -> (&&&) ((===) z (list [(!!) 1])) ((=/=) z (list [x; y])))), all answers {
q=_.10;
}
fun q ->
  Eigen.two
    (fun x y ->
       Fresh.one
         (fun z ->
            (&&&) ((=/=) z (list [x; y]))
              (Fresh.two (fun a b -> (===) z (list [a; b]))))), all answers {
q=_.10;
}
fun q ->
  Fresh.one
    (fun x ->
       Eigen.two
         (fun y z ->
            (&&&) ((=/=) x (list [y; z]))
              (Fresh.two (fun a b -> (===) x (list [a; b]))))), all answers {
q=_.10;
}
fun q ->
  Fresh.one
    (fun x ->
       Eigen.two
         (fun y z ->
            (&&&) ((=/=) x (list [y; z]))
              (Fresh.two (fun a b -> (===) x (list [a; b]))))), all answers {
q=_.10;
}
fun q ->
  Eigen.two
    (fun y z ->
       (&&&) ((=/=) q (list [y; z]))
         (Fresh.two (fun a b -> (===) q (list [a; b])))), all answers {
q=[_.13; _.14];
}
fun q ->
  Eigen.two
    (fun x y ->
       Fresh.one
         (fun z -> (&&&) ((=/=) z (list [x; y])) ((===) z (list [x; y])))), all answers {
}
fun q ->
  Eigen.two
    (fun x y ->
       Fresh.one
         (fun z ->
            (&&&) ((=/=) z ((%) x y))
              ((===) z (list [(!!) 1; (!!) 2; (!!) 3])))), all answers {
}
fun q ->
  Fresh.three
    (fun x y z ->
       Eigen.two (fun a b -> (&&&) ((===) x ((%) y z)) ((=/=) x ((%) a b)))), all answers {
}
fun q ->
  Eigen.two
    (fun a b ->
       Fresh.three
         (fun x y z ->
            (&&&) ((&&&) ((=/=) x ((%) a b)) ((===) x ((%) y z)))
              ((===) ((%) y z) (list [(!!) 1; (!!) 2; (!!) 3])))), all answers {
}
fun q ->
  Fresh.one
    (fun x -> Eigen.one (fun y -> Fresh.one (fun z -> (=/=) y (pair x y)))), all answers {
q=_.10;
}
fun q ->
  Eigen.one
    (fun x -> Fresh.one (fun y -> (&&&) ((===) x y) ((=/=) y ((!!) 5)))), all answers {
}
fun q ->
  Eigen.one
    (fun x -> Fresh.one (fun y -> (&&&) ((===) y x) ((=/=) y ((!!) 5)))), all answers {
}
fun q ->
  Eigen.one (fun x -> Fresh.one (fun y -> (&&&) ((===) x y) ((=/=) y q))), all answers {
}
fun q ->
  Eigen.one (fun x -> Fresh.two (fun y z -> (&&&) ((===) x y) ((=/=) y z))), all answers {
q=_.10;
}
