fun q -> (=/=) q !1, all answers {
q=_.10 [=/= 1];
}
fun q ->
  MiniKanren.Fresh.three
    (fun x y z ->
       MiniKanren.compose
         [(=/=) x y; (===) x ((!!) [!0; z; !1]); (===) y ((!!) [!0; !1; !1])]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.three
    (fun x y z ->
       MiniKanren.compose
         [(=/=) x y; (===) x ((!!) [!0; z; !1]); (===) y ((!!) [!0; !1; !1]);
          (===) z !0]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.three
    (fun x y z ->
       MiniKanren.compose
         [(===) z !0; (=/=) x y; (===) x ((!!) [!0; z; !1]);
          (===) y ((!!) [!0; !1; !1])]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.three
    (fun x y z ->
       MiniKanren.compose
         [(===) z !1; (=/=) x y; (===) x ((!!) [!0; z; !1]);
          (===) y ((!!) [!0; !1; !1])]), all answers {
}
fun q ->
  MiniKanren.Fresh.three
    (fun x y z ->
       MiniKanren.compose
         [(===) x ((!!) [!0; z; !1]); (===) y ((!!) [!0; !1; !1]); (=/=) x y]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.three
    (fun x y z ->
       MiniKanren.compose
         [(===) z !1; (===) x ((!!) [!0; z; !1]); (===) y ((!!) [!0; !1; !1]);
          (=/=) x y]), all answers {
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose [(=/=) ((!!) [x; !1]) ((!!) [!2; y]); (===) x !2]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose [(=/=) ((!!) [x; !1]) ((!!) [!2; y]); (===) y !1]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) ((!!) [x; !1]) ((!!) [!2; y]); (===) ((!!) [x; y]) q]), all answers {
q=[_.11 [=/= 2]; _.12 [=/= 1]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) ((!!) [x; !1]) ((!!) [!2; y]); (===) x !2;
          (===) ((!!) [x; y]) q]), all answers {
q=[2; _.12];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) ((!!) [x; !1]) ((!!) [!2; y]); (===) x !2; (===) y !9;
          (===) ((!!) [x; y]) q]), all answers {
q=[2; 9];
}
fun q ->
  MiniKanren.Fresh.two
    (fun a d ->
       MiniKanren.compose
         [(===) ((!!) [a; d]) q; (=/=) q ((!!) [!5; !6]); (===) a !5;
          (===) d !6]), all answers {
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) ((!!) [x; !1]) ((!!) [!2; y]); (===) x !2; (===) y !1;
          (===) ((!!) [x; y]) q]), all answers {
}
fun q ->
  MiniKanren.Fresh.three
    (fun a x z ->
       MiniKanren.compose
         [(=/=) a ((!!) [x; !1]); (===) a ((!!) [z; !1]); (===) x z]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.three
    (fun a x z ->
       MiniKanren.compose
         [(=/=) a ((!!) [x; !1]); (===) a ((!!) [z; !1]); (===) x !5;
          (===) ((!!) [x; z]) q]), all answers {
q=[5; _.13 [=/= 5]];
}
fun q -> (=/=) !3 !4, all answers {
q=_.10;
}
fun q -> (=/=) !3 !3, all answers {
}
fun q -> (&&&) ((&&&) ((=/=) !5 q) ((=/=) !6 q)) ((===) q !5), all answers {
}
fun q ->
  MiniKanren.Fresh.two
    (fun a d ->
       MiniKanren.compose
         [(===) ((!!) [a; d]) q; (=/=) q ((!!) [!5; !6]); (===) a !5]), all answers {
q=[5; _.12];
}
fun q ->
  MiniKanren.Fresh.one (fun a -> MiniKanren.compose [(===) !3 a; (=/=) a !4]), all answers {
q=_.10;
}
fun q -> (&&&) ((=/=) !4 q) ((=/=) !3 q), all answers {
q=_.10 [=/= 3; =/= 4];
}
fun q -> (&&&) ((=/=) q !5) ((=/=) q !5), all answers {
q=_.10 [=/= 5];
}
fun q ->
  let foo x =
    MiniKanren.Fresh.one (fun a -> MiniKanren.compose [(=/=) x a])
  in
  MiniKanren.Fresh.one (fun a -> MiniKanren.compose [foo a]), all answers {
q=_.10;
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y -> MiniKanren.compose [(===) ((!!) [x; y]) q; (=/=) x y]), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q ->
  Fresh.two (fun a d -> (?&) [(===) ((!!) [a; d]) q; (=/=) q ((!!) [!5; !6])]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun q ->
  Fresh.two
    (fun a d ->
       (?&) [(===) ((!!) [a; d]) q; (=/=) q ((!!) [!5; !6]); (===) a !3]), all answers {
q=[3; _.12];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y -> MiniKanren.compose [(===) ((!!) [x; y]) q; (=/=) y x]), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose [(===) ((!!) [x; y]) q; (=/=) x y; (=/=) y x]), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose [(===) ((!!) [x; y]) q; (=/=) x y; (=/=) x y]), all answers {
q=[_.11 [=/= _.12]; _.12 [=/= _.11]];
}
fun q -> (&&&) ((=/=) q !5) ((=/=) !5 q), all answers {
q=_.10 [=/= 5];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(===) ((!!) [x; y]) q; (=/=) ((!!) [x; y]) ((!!) [!5; !6]);
          (=/=) x !5]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(===) ((!!) [x; y]) q; (=/=) x !5;
          (=/=) ((!!) [x; y]) ((!!) [!5; !6])]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) x !5; (=/=) ((!!) [x; y]) ((!!) [!5; !6]);
          (===) ((!!) [x; y]) q]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) !5 x; (=/=) ((!!) [x; y]) ((!!) [!5; !6]);
          (===) ((!!) [x; y]) q]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun q ->
  MiniKanren.Fresh.two
    (fun x y ->
       MiniKanren.compose
         [(=/=) !5 x; (=/=) ((!!) [y; x]) ((!!) [!6; !5]);
          (===) ((!!) [x; y]) q]), all answers {
q=[_.11 [=/= 5]; _.12 [=/= 6]];
}
fun x ->
  MiniKanren.Fresh.two
    (fun y z ->
       MiniKanren.compose [(=/=) x ((!!) [y; !2]); (===) x ((!!) [z; !2])]), all answers {
xs=[_.12 [=/= _.11]; 2];
}
fun q -> distincto ((%) !2 ((%<) !3 q)), all answers {
q=_.35 [=/= 3; =/= 2];
}
fun q -> remembero !1 ((%) !1 ((%) !2 ((%<) !1 !3))) q, all answers {
q=[2; 3];
q=[2; 1; 3];
q=[1; 2; 3];
q=[1; 2; 1; 3];
}
fun q -> remembero !1 ((%) !1 ((%<) !2 !3)) ((%) !1 ((%<) !2 !3)), all answers {
q=_.10;
}
fun q -> rembero !1 ((%) !1 ((%) !2 ((%<) !1 !3))) q, all answers {
q=[2; 3];
}
fun q -> rembero !1 ((%) !1 ((%<) !2 !3)) ((%) !1 ((%<) !2 !3)), all answers {
}
