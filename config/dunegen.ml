let project_root = Array.get Sys.argv 1

(* pretty dumb file reading *)
let read_file fn =
  let ichan = open_in fn in
  let rec helper lines =
    try
      let line = input_line ichan in
      helper (line :: lines)
    with End_of_file -> lines
  in
  let lines = List.rev @@ helper [] in
  String.concat "\n" lines

let string_match re s = Str.string_match re s 0

let match_fn_ext fn ext =
  String.equal ext @@ Filename.extension fn

(* scans `regression` folder looking for `test*.ml` files *)
let get_testnames () =
  let re = Str.regexp "test*" in
  let check_fn fn =
       (string_match re fn)
    && (match_fn_ext fn ".ml")
    (* `dune` doesn't give us direct access to `source` folder, only to the `build` folder,
     * thus we have to exclude files generated by the preprocessor
     *)
    && (not @@ match_fn_ext (Filename.remove_extension fn) ".pp")
    (* `tester.ml` also should be excluded *)
    && (not @@ String.equal fn "tester.ml")
  in
  let tests_dir =
    String.concat Filename.dir_sep [project_root; "regression"]
  in
     Sys.readdir tests_dir
  |> Array.to_list
  |> List.filter check_fn
  |> List.map Filename.remove_extension
  |> List.sort String.compare

let testnames = get_testnames ()

(* generates build rules for `test*.exe` *)
let gen_build_rule tpl =
  let re = Str.regexp "%{tests}" in
  let testnames_s = String.concat "\n    " testnames in
  Str.global_replace re testnames_s tpl

(* generates rules to run tests and promote their results,
 * i.e. rules `run-test*` and `promote-test*` *)
let gen_run_rules tpl =
  let insert_testname tpl testname =
    let re = Str.regexp "%{test}" in
    Str.global_replace re testname tpl
  in
  let rules = List.map (insert_testname tpl) testnames in
  String.concat "\n" rules

let generate () =
  let header =
    "\
    ; This file is autogenerated by `config/dunegen.ml`. \n\
    ; Please do not modify it. \n\n\
    "
  in
  let gen_fn = "dune.tests.gen" in
  let build_tpl_fn = "dune.tests.tpl" in
  let run_tpl_fn = "dune.runtest.tpl" in
  let build_tpl = read_file build_tpl_fn in
  let run_tpl = read_file run_tpl_fn in
  let outchn = open_out gen_fn in
  output_string outchn @@ header;
  output_string outchn @@ gen_build_rule build_tpl;
  output_string outchn @@ gen_run_rules run_tpl;
  ()

let () =
  generate ()